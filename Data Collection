# Data Collection
#### Lecture Notes 1
---------------------------------------------------------------
## 4 Ways
### 1. File: Download
### 2. Database: Query

### 3. API: Query -> usually REST APIs (Representational State Transfer)
* Uses standard HTTP interface and methods (GET, PUT, POST, DELETE)
* Stateless – the server doesn’t remember what you were doing

```python
token = "" # not going to tell you mine
response = requests.get("https://api.github.com/user", params={"access_token":token}) # usually have params
print response.content
```
### Authentication: OAuth


### 4. Webpage: Scrap/Parse -> usually HTTP request

```python
import requests

# The Get command
response = requests.get("http://www.datasciencecourse.org")

# some relevant fields
response.status_code
response.content # or response.text
response.headers
response.headers['Content-Type']

# Handeling Parameters in a URL like this:
# https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=9&cad=rja&uact=8
params = {"sa":"t", "rct":"j", "q":"", "esrc":"s", "source":"web", "cd":"9", "cad":"rja", "uact":"8"}
response = requests.get("http://www.google.com/url", params=params)

# Ohter commands that will change the state on the server
response = requests.put(...)
response = requests.post(...)
response = requests.delete(...)
```
## Data Formats
### 1. CSV files: pandas
(comma separate value) that are not always separated by commas
```python
import pandas as pd
dataframe = pd.read_csv("CourseRoster_F16_15688_B_08.30.2016.csv", delimiter=',', quotechar='"')
```

### 2. JSON files and string: json
(Javascript object notation) that looks like this:
{
  "message": "Not Found",
  "documentation_url": "https://developer.github.com/v3"
}

```python
import json
# load json from a REST API call
response = requests.get("https://api.github.com/user", params={"access_token":token})
data = json.loads(response.content)
json.load(file) # load json from file
json.dumps(obj) # return json string
json.dump(obj, file) # write json to file
```

### 3. HTML/XML files and string: BeautifulSoup
(hypertext markup language / extensible markup language) that contains hiearchical content delineated by tags
```python
# get all the links within the data science course schedule
from bs4 import BeautifulSoup
import requests
response = requests.get("http://www.datasciencecourse.org")
root = BeautifulSoup(response.content)
root.find("section",id="schedule").find("table").find("tbody").findAll("a")
```
